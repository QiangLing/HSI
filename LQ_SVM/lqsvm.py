# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lqsvm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lqsvm')
    _lqsvm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lqsvm', [dirname(__file__)])
        except ImportError:
            import _lqsvm
            return _lqsvm
        try:
            _mod = imp.load_module('_lqsvm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lqsvm = swig_import_helper()
    del swig_import_helper
else:
    import _lqsvm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

LQSVM_VERSION = _lqsvm.LQSVM_VERSION
class parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["svm_type"] = _lqsvm.parameter_svm_type_set
    __swig_getmethods__["svm_type"] = _lqsvm.parameter_svm_type_get
    if _newclass:
        svm_type = _swig_property(_lqsvm.parameter_svm_type_get, _lqsvm.parameter_svm_type_set)
    __swig_setmethods__["kernel"] = _lqsvm.parameter_kernel_set
    __swig_getmethods__["kernel"] = _lqsvm.parameter_kernel_get
    if _newclass:
        kernel = _swig_property(_lqsvm.parameter_kernel_get, _lqsvm.parameter_kernel_set)
    __swig_setmethods__["solver"] = _lqsvm.parameter_solver_set
    __swig_getmethods__["solver"] = _lqsvm.parameter_solver_get
    if _newclass:
        solver = _swig_property(_lqsvm.parameter_solver_get, _lqsvm.parameter_solver_set)
    __swig_setmethods__["degree"] = _lqsvm.parameter_degree_set
    __swig_getmethods__["degree"] = _lqsvm.parameter_degree_get
    if _newclass:
        degree = _swig_property(_lqsvm.parameter_degree_get, _lqsvm.parameter_degree_set)
    __swig_setmethods__["gamma"] = _lqsvm.parameter_gamma_set
    __swig_getmethods__["gamma"] = _lqsvm.parameter_gamma_get
    if _newclass:
        gamma = _swig_property(_lqsvm.parameter_gamma_get, _lqsvm.parameter_gamma_set)
    __swig_setmethods__["coef0"] = _lqsvm.parameter_coef0_set
    __swig_getmethods__["coef0"] = _lqsvm.parameter_coef0_get
    if _newclass:
        coef0 = _swig_property(_lqsvm.parameter_coef0_get, _lqsvm.parameter_coef0_set)
    __swig_setmethods__["p"] = _lqsvm.parameter_p_set
    __swig_getmethods__["p"] = _lqsvm.parameter_p_get
    if _newclass:
        p = _swig_property(_lqsvm.parameter_p_get, _lqsvm.parameter_p_set)
    __swig_setmethods__["cache_size"] = _lqsvm.parameter_cache_size_set
    __swig_getmethods__["cache_size"] = _lqsvm.parameter_cache_size_get
    if _newclass:
        cache_size = _swig_property(_lqsvm.parameter_cache_size_get, _lqsvm.parameter_cache_size_set)
    __swig_setmethods__["tol"] = _lqsvm.parameter_tol_set
    __swig_getmethods__["tol"] = _lqsvm.parameter_tol_get
    if _newclass:
        tol = _swig_property(_lqsvm.parameter_tol_get, _lqsvm.parameter_tol_set)
    __swig_setmethods__["C"] = _lqsvm.parameter_C_set
    __swig_getmethods__["C"] = _lqsvm.parameter_C_get
    if _newclass:
        C = _swig_property(_lqsvm.parameter_C_get, _lqsvm.parameter_C_set)
    __swig_setmethods__["weight0"] = _lqsvm.parameter_weight0_set
    __swig_getmethods__["weight0"] = _lqsvm.parameter_weight0_get
    if _newclass:
        weight0 = _swig_property(_lqsvm.parameter_weight0_get, _lqsvm.parameter_weight0_set)
    __swig_setmethods__["weight1"] = _lqsvm.parameter_weight1_set
    __swig_getmethods__["weight1"] = _lqsvm.parameter_weight1_get
    if _newclass:
        weight1 = _swig_property(_lqsvm.parameter_weight1_get, _lqsvm.parameter_weight1_set)
    __swig_setmethods__["nu"] = _lqsvm.parameter_nu_set
    __swig_getmethods__["nu"] = _lqsvm.parameter_nu_get
    if _newclass:
        nu = _swig_property(_lqsvm.parameter_nu_get, _lqsvm.parameter_nu_set)
    __swig_setmethods__["mu"] = _lqsvm.parameter_mu_set
    __swig_getmethods__["mu"] = _lqsvm.parameter_mu_get
    if _newclass:
        mu = _swig_property(_lqsvm.parameter_mu_get, _lqsvm.parameter_mu_set)
    __swig_setmethods__["shrinking"] = _lqsvm.parameter_shrinking_set
    __swig_getmethods__["shrinking"] = _lqsvm.parameter_shrinking_get
    if _newclass:
        shrinking = _swig_property(_lqsvm.parameter_shrinking_get, _lqsvm.parameter_shrinking_set)
    __swig_setmethods__["probability"] = _lqsvm.parameter_probability_set
    __swig_getmethods__["probability"] = _lqsvm.parameter_probability_get
    if _newclass:
        probability = _swig_property(_lqsvm.parameter_probability_get, _lqsvm.parameter_probability_set)
    __swig_setmethods__["verbose"] = _lqsvm.parameter_verbose_set
    __swig_getmethods__["verbose"] = _lqsvm.parameter_verbose_get
    if _newclass:
        verbose = _swig_property(_lqsvm.parameter_verbose_get, _lqsvm.parameter_verbose_set)
    __swig_setmethods__["Cestimation"] = _lqsvm.parameter_Cestimation_set
    __swig_getmethods__["Cestimation"] = _lqsvm.parameter_Cestimation_get
    if _newclass:
        Cestimation = _swig_property(_lqsvm.parameter_Cestimation_get, _lqsvm.parameter_Cestimation_set)
    __swig_setmethods__["k"] = _lqsvm.parameter_k_set
    __swig_getmethods__["k"] = _lqsvm.parameter_k_get
    if _newclass:
        k = _swig_property(_lqsvm.parameter_k_get, _lqsvm.parameter_k_set)
    __swig_setmethods__["smin"] = _lqsvm.parameter_smin_set
    __swig_getmethods__["smin"] = _lqsvm.parameter_smin_get
    if _newclass:
        smin = _swig_property(_lqsvm.parameter_smin_get, _lqsvm.parameter_smin_set)
    __swig_setmethods__["smax"] = _lqsvm.parameter_smax_set
    __swig_getmethods__["smax"] = _lqsvm.parameter_smax_get
    if _newclass:
        smax = _swig_property(_lqsvm.parameter_smax_get, _lqsvm.parameter_smax_set)

    def __init__(self, *args):
        this = _lqsvm.new_parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_parameter
    __del__ = lambda self: None
parameter_swigregister = _lqsvm.parameter_swigregister
parameter_swigregister(parameter)
cvar = _lqsvm.cvar

class model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _lqsvm.model_param_set
    __swig_getmethods__["param"] = _lqsvm.model_param_get
    if _newclass:
        param = _swig_property(_lqsvm.model_param_get, _lqsvm.model_param_set)
    __swig_setmethods__["train_data"] = _lqsvm.model_train_data_set
    __swig_getmethods__["train_data"] = _lqsvm.model_train_data_get
    if _newclass:
        train_data = _swig_property(_lqsvm.model_train_data_get, _lqsvm.model_train_data_set)
    __swig_setmethods__["train_data_rows"] = _lqsvm.model_train_data_rows_set
    __swig_getmethods__["train_data_rows"] = _lqsvm.model_train_data_rows_get
    if _newclass:
        train_data_rows = _swig_property(_lqsvm.model_train_data_rows_get, _lqsvm.model_train_data_rows_set)
    __swig_setmethods__["train_data_cols"] = _lqsvm.model_train_data_cols_set
    __swig_getmethods__["train_data_cols"] = _lqsvm.model_train_data_cols_get
    if _newclass:
        train_data_cols = _swig_property(_lqsvm.model_train_data_cols_get, _lqsvm.model_train_data_cols_set)
    __swig_setmethods__["W"] = _lqsvm.model_W_set
    __swig_getmethods__["W"] = _lqsvm.model_W_get
    if _newclass:
        W = _swig_property(_lqsvm.model_W_get, _lqsvm.model_W_set)
    __swig_setmethods__["nr_class"] = _lqsvm.model_nr_class_set
    __swig_getmethods__["nr_class"] = _lqsvm.model_nr_class_get
    if _newclass:
        nr_class = _swig_property(_lqsvm.model_nr_class_get, _lqsvm.model_nr_class_set)
    __swig_setmethods__["total_SV"] = _lqsvm.model_total_SV_set
    __swig_getmethods__["total_SV"] = _lqsvm.model_total_SV_get
    if _newclass:
        total_SV = _swig_property(_lqsvm.model_total_SV_get, _lqsvm.model_total_SV_set)
    __swig_setmethods__["rho"] = _lqsvm.model_rho_set
    __swig_getmethods__["rho"] = _lqsvm.model_rho_get
    if _newclass:
        rho = _swig_property(_lqsvm.model_rho_get, _lqsvm.model_rho_set)
    __swig_setmethods__["obj"] = _lqsvm.model_obj_set
    __swig_getmethods__["obj"] = _lqsvm.model_obj_get
    if _newclass:
        obj = _swig_property(_lqsvm.model_obj_get, _lqsvm.model_obj_set)
    __swig_setmethods__["sv_coef"] = _lqsvm.model_sv_coef_set
    __swig_getmethods__["sv_coef"] = _lqsvm.model_sv_coef_get
    if _newclass:
        sv_coef = _swig_property(_lqsvm.model_sv_coef_get, _lqsvm.model_sv_coef_set)
    __swig_setmethods__["sv_indices"] = _lqsvm.model_sv_indices_set
    __swig_getmethods__["sv_indices"] = _lqsvm.model_sv_indices_get
    if _newclass:
        sv_indices = _swig_property(_lqsvm.model_sv_indices_get, _lqsvm.model_sv_indices_set)

    def __init__(self, svm_type: 'std::string', kernel: 'std::string', solver: 'std::string', degree: 'int', gamma: 'double', coef0: 'double', p: 'double', cache_size: 'double', tol: 'double', C: 'double', weight0: 'double', weight1: 'double', nu: 'double', mu: 'double', shrinking: 'bool', probability: 'bool', verbose: 'bool', Cestimation: 'bool', k: 'double', smin: 'double', smax: 'double'):
        this = _lqsvm.new_model(svm_type, kernel, solver, degree, gamma, coef0, p, cache_size, tol, C, weight0, weight1, nu, mu, shrinking, probability, verbose, Cestimation, k, smin, smax)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def check_parameter(self) -> "char const *":
        return _lqsvm.model_check_parameter(self)
    __swig_destroy__ = _lqsvm.delete_model
    __del__ = lambda self: None

    def get_sv_coef(self, z: 'double *') -> "void":
        return _lqsvm.model_get_sv_coef(self, z)

    def get_sv_indices(self, z: 'int *') -> "void":
        return _lqsvm.model_get_sv_indices(self, z)
model_swigregister = _lqsvm.model_swigregister
model_swigregister(model)

class SVDD(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVDD, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVDD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_square"] = _lqsvm.SVDD_r_square_set
    __swig_getmethods__["r_square"] = _lqsvm.SVDD_r_square_get
    if _newclass:
        r_square = _swig_property(_lqsvm.SVDD_r_square_get, _lqsvm.SVDD_r_square_set)

    def __init__(self, *args):
        this = _lqsvm.new_SVDD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_SVDD
    __del__ = lambda self: None

    def fit(self, x: 'double const *', SW: 'double const *') -> "void":
        return _lqsvm.SVDD_fit(self, x, SW)

    def decision_function(self, x: 'double const *', z: 'double *') -> "void":
        return _lqsvm.SVDD_decision_function(self, x, z)

    def predict(self, x: 'double const *', z: 'int *') -> "void":
        return _lqsvm.SVDD_predict(self, x, z)
SVDD_swigregister = _lqsvm.SVDD_swigregister
SVDD_swigregister(SVDD)

class OneClassSVM(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneClassSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneClassSVM, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _lqsvm.new_OneClassSVM(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_OneClassSVM
    __del__ = lambda self: None

    def fit(self, x: 'double const *', SW: 'double const *') -> "void":
        return _lqsvm.OneClassSVM_fit(self, x, SW)

    def decision_function(self, x: 'double const *', z: 'double *') -> "void":
        return _lqsvm.OneClassSVM_decision_function(self, x, z)

    def predict(self, x: 'double const *', z: 'int *') -> "void":
        return _lqsvm.OneClassSVM_predict(self, x, z)
OneClassSVM_swigregister = _lqsvm.OneClassSVM_swigregister
OneClassSVM_swigregister(OneClassSVM)

class CSR_AD(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSR_AD, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSR_AD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["C_SV"] = _lqsvm.CSR_AD_C_SV_set
    __swig_getmethods__["C_SV"] = _lqsvm.CSR_AD_C_SV_get
    if _newclass:
        C_SV = _swig_property(_lqsvm.CSR_AD_C_SV_get, _lqsvm.CSR_AD_C_SV_set)

    def __init__(self, *args):
        this = _lqsvm.new_CSR_AD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_CSR_AD
    __del__ = lambda self: None

    def decision_function(self, x: 'double const *', y: 'double const *', SW: 'double const *') -> "double":
        return _lqsvm.CSR_AD_decision_function(self, x, y, SW)

    def decision_function1(self, x: 'double const *', y: 'double const *', SW: 'double const *') -> "double":
        return _lqsvm.CSR_AD_decision_function1(self, x, y, SW)
CSR_AD_swigregister = _lqsvm.CSR_AD_swigregister
CSR_AD_swigregister(CSR_AD)

class CSR_AD2(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSR_AD2, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSR_AD2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["total_SV0"] = _lqsvm.CSR_AD2_total_SV0_set
    __swig_getmethods__["total_SV0"] = _lqsvm.CSR_AD2_total_SV0_get
    if _newclass:
        total_SV0 = _swig_property(_lqsvm.CSR_AD2_total_SV0_get, _lqsvm.CSR_AD2_total_SV0_set)
    __swig_setmethods__["C_SV0"] = _lqsvm.CSR_AD2_C_SV0_set
    __swig_getmethods__["C_SV0"] = _lqsvm.CSR_AD2_C_SV0_get
    if _newclass:
        C_SV0 = _swig_property(_lqsvm.CSR_AD2_C_SV0_get, _lqsvm.CSR_AD2_C_SV0_set)
    __swig_setmethods__["C_SV"] = _lqsvm.CSR_AD2_C_SV_set
    __swig_getmethods__["C_SV"] = _lqsvm.CSR_AD2_C_SV_get
    if _newclass:
        C_SV = _swig_property(_lqsvm.CSR_AD2_C_SV_get, _lqsvm.CSR_AD2_C_SV_set)
    __swig_setmethods__["obj0"] = _lqsvm.CSR_AD2_obj0_set
    __swig_getmethods__["obj0"] = _lqsvm.CSR_AD2_obj0_get
    if _newclass:
        obj0 = _swig_property(_lqsvm.CSR_AD2_obj0_get, _lqsvm.CSR_AD2_obj0_set)
    __swig_setmethods__["sv_coef0"] = _lqsvm.CSR_AD2_sv_coef0_set
    __swig_getmethods__["sv_coef0"] = _lqsvm.CSR_AD2_sv_coef0_get
    if _newclass:
        sv_coef0 = _swig_property(_lqsvm.CSR_AD2_sv_coef0_get, _lqsvm.CSR_AD2_sv_coef0_set)
    __swig_setmethods__["sv_indices0"] = _lqsvm.CSR_AD2_sv_indices0_set
    __swig_getmethods__["sv_indices0"] = _lqsvm.CSR_AD2_sv_indices0_get
    if _newclass:
        sv_indices0 = _swig_property(_lqsvm.CSR_AD2_sv_indices0_get, _lqsvm.CSR_AD2_sv_indices0_set)
    __swig_setmethods__["rho0"] = _lqsvm.CSR_AD2_rho0_set
    __swig_getmethods__["rho0"] = _lqsvm.CSR_AD2_rho0_get
    if _newclass:
        rho0 = _swig_property(_lqsvm.CSR_AD2_rho0_get, _lqsvm.CSR_AD2_rho0_set)

    def __init__(self, *args):
        this = _lqsvm.new_CSR_AD2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_CSR_AD2
    __del__ = lambda self: None

    def decision_function(self, x: 'double const *', y: 'double const *', SW: 'double const *') -> "double":
        return _lqsvm.CSR_AD2_decision_function(self, x, y, SW)

    def get_sv_coef0(self, z: 'double *') -> "void":
        return _lqsvm.CSR_AD2_get_sv_coef0(self, z)

    def get_sv_indices0(self, z: 'int *') -> "void":
        return _lqsvm.CSR_AD2_get_sv_indices0(self, z)
CSR_AD2_swigregister = _lqsvm.CSR_AD2_swigregister
CSR_AD2_swigregister(CSR_AD2)

class CSVC(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVC, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSVC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LabelName"] = _lqsvm.CSVC_LabelName_set
    __swig_getmethods__["LabelName"] = _lqsvm.CSVC_LabelName_get
    if _newclass:
        LabelName = _swig_property(_lqsvm.CSVC_LabelName_get, _lqsvm.CSVC_LabelName_set)
    __swig_setmethods__["train_label"] = _lqsvm.CSVC_train_label_set
    __swig_getmethods__["train_label"] = _lqsvm.CSVC_train_label_get
    if _newclass:
        train_label = _swig_property(_lqsvm.CSVC_train_label_get, _lqsvm.CSVC_train_label_set)
    __swig_setmethods__["nSV"] = _lqsvm.CSVC_nSV_set
    __swig_getmethods__["nSV"] = _lqsvm.CSVC_nSV_get
    if _newclass:
        nSV = _swig_property(_lqsvm.CSVC_nSV_get, _lqsvm.CSVC_nSV_set)

    def __init__(self, *args):
        this = _lqsvm.new_CSVC(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_CSVC
    __del__ = lambda self: None

    def fit(self, x: 'double const *', label: 'int const *', SW: 'double const *') -> "void":
        return _lqsvm.CSVC_fit(self, x, label, SW)

    def decision_function(self, x: 'double const *', z: 'double *') -> "void":
        return _lqsvm.CSVC_decision_function(self, x, z)

    def predict(self, x: 'double const *', z: 'int *') -> "void":
        return _lqsvm.CSVC_predict(self, x, z)
CSVC_swigregister = _lqsvm.CSVC_swigregister
CSVC_swigregister(CSVC)

class CSR_TD(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSR_TD, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSR_TD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LabelName"] = _lqsvm.CSR_TD_LabelName_set
    __swig_getmethods__["LabelName"] = _lqsvm.CSR_TD_LabelName_get
    if _newclass:
        LabelName = _swig_property(_lqsvm.CSR_TD_LabelName_get, _lqsvm.CSR_TD_LabelName_set)
    __swig_setmethods__["train_label"] = _lqsvm.CSR_TD_train_label_set
    __swig_getmethods__["train_label"] = _lqsvm.CSR_TD_train_label_get
    if _newclass:
        train_label = _swig_property(_lqsvm.CSR_TD_train_label_get, _lqsvm.CSR_TD_train_label_set)
    __swig_setmethods__["nSV"] = _lqsvm.CSR_TD_nSV_set
    __swig_getmethods__["nSV"] = _lqsvm.CSR_TD_nSV_get
    if _newclass:
        nSV = _swig_property(_lqsvm.CSR_TD_nSV_get, _lqsvm.CSR_TD_nSV_set)
    __swig_setmethods__["Nt"] = _lqsvm.CSR_TD_Nt_set
    __swig_getmethods__["Nt"] = _lqsvm.CSR_TD_Nt_get
    if _newclass:
        Nt = _swig_property(_lqsvm.CSR_TD_Nt_get, _lqsvm.CSR_TD_Nt_set)
    __swig_setmethods__["Nb"] = _lqsvm.CSR_TD_Nb_set
    __swig_getmethods__["Nb"] = _lqsvm.CSR_TD_Nb_get
    if _newclass:
        Nb = _swig_property(_lqsvm.CSR_TD_Nb_get, _lqsvm.CSR_TD_Nb_set)
    __swig_setmethods__["rt"] = _lqsvm.CSR_TD_rt_set
    __swig_getmethods__["rt"] = _lqsvm.CSR_TD_rt_get
    if _newclass:
        rt = _swig_property(_lqsvm.CSR_TD_rt_get, _lqsvm.CSR_TD_rt_set)
    __swig_setmethods__["rb"] = _lqsvm.CSR_TD_rb_set
    __swig_getmethods__["rb"] = _lqsvm.CSR_TD_rb_get
    if _newclass:
        rb = _swig_property(_lqsvm.CSR_TD_rb_get, _lqsvm.CSR_TD_rb_set)
    __swig_setmethods__["sum_at"] = _lqsvm.CSR_TD_sum_at_set
    __swig_getmethods__["sum_at"] = _lqsvm.CSR_TD_sum_at_get
    if _newclass:
        sum_at = _swig_property(_lqsvm.CSR_TD_sum_at_get, _lqsvm.CSR_TD_sum_at_set)
    __swig_setmethods__["sum_ab"] = _lqsvm.CSR_TD_sum_ab_set
    __swig_getmethods__["sum_ab"] = _lqsvm.CSR_TD_sum_ab_get
    if _newclass:
        sum_ab = _swig_property(_lqsvm.CSR_TD_sum_ab_get, _lqsvm.CSR_TD_sum_ab_set)
    __swig_setmethods__["CEst"] = _lqsvm.CSR_TD_CEst_set
    __swig_getmethods__["CEst"] = _lqsvm.CSR_TD_CEst_get
    if _newclass:
        CEst = _swig_property(_lqsvm.CSR_TD_CEst_get, _lqsvm.CSR_TD_CEst_set)

    def __init__(self, *args):
        this = _lqsvm.new_CSR_TD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_CSR_TD
    __del__ = lambda self: None

    def decision_function(self, x: 'double const *', label: 'int const *', y: 'double const *', SW: 'double const *') -> "double":
        return _lqsvm.CSR_TD_decision_function(self, x, label, y, SW)

    def get_CEst(self, z: 'double *') -> "void":
        return _lqsvm.CSR_TD_get_CEst(self, z)
CSR_TD_swigregister = _lqsvm.CSR_TD_swigregister
CSR_TD_swigregister(CSR_TD)

class CSRBBH_TD(model):
    __swig_setmethods__ = {}
    for _s in [model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSRBBH_TD, name, value)
    __swig_getmethods__ = {}
    for _s in [model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSRBBH_TD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LabelName"] = _lqsvm.CSRBBH_TD_LabelName_set
    __swig_getmethods__["LabelName"] = _lqsvm.CSRBBH_TD_LabelName_get
    if _newclass:
        LabelName = _swig_property(_lqsvm.CSRBBH_TD_LabelName_get, _lqsvm.CSRBBH_TD_LabelName_set)
    __swig_setmethods__["train_label"] = _lqsvm.CSRBBH_TD_train_label_set
    __swig_getmethods__["train_label"] = _lqsvm.CSRBBH_TD_train_label_get
    if _newclass:
        train_label = _swig_property(_lqsvm.CSRBBH_TD_train_label_get, _lqsvm.CSRBBH_TD_train_label_set)
    __swig_setmethods__["total_SV0"] = _lqsvm.CSRBBH_TD_total_SV0_set
    __swig_getmethods__["total_SV0"] = _lqsvm.CSRBBH_TD_total_SV0_get
    if _newclass:
        total_SV0 = _swig_property(_lqsvm.CSRBBH_TD_total_SV0_get, _lqsvm.CSRBBH_TD_total_SV0_set)
    __swig_setmethods__["nSV"] = _lqsvm.CSRBBH_TD_nSV_set
    __swig_getmethods__["nSV"] = _lqsvm.CSRBBH_TD_nSV_get
    if _newclass:
        nSV = _swig_property(_lqsvm.CSRBBH_TD_nSV_get, _lqsvm.CSRBBH_TD_nSV_set)
    __swig_setmethods__["obj0"] = _lqsvm.CSRBBH_TD_obj0_set
    __swig_getmethods__["obj0"] = _lqsvm.CSRBBH_TD_obj0_get
    if _newclass:
        obj0 = _swig_property(_lqsvm.CSRBBH_TD_obj0_get, _lqsvm.CSRBBH_TD_obj0_set)
    __swig_setmethods__["Nt"] = _lqsvm.CSRBBH_TD_Nt_set
    __swig_getmethods__["Nt"] = _lqsvm.CSRBBH_TD_Nt_get
    if _newclass:
        Nt = _swig_property(_lqsvm.CSRBBH_TD_Nt_get, _lqsvm.CSRBBH_TD_Nt_set)
    __swig_setmethods__["Nb"] = _lqsvm.CSRBBH_TD_Nb_set
    __swig_getmethods__["Nb"] = _lqsvm.CSRBBH_TD_Nb_get
    if _newclass:
        Nb = _swig_property(_lqsvm.CSRBBH_TD_Nb_get, _lqsvm.CSRBBH_TD_Nb_set)
    __swig_setmethods__["r0"] = _lqsvm.CSRBBH_TD_r0_set
    __swig_getmethods__["r0"] = _lqsvm.CSRBBH_TD_r0_get
    if _newclass:
        r0 = _swig_property(_lqsvm.CSRBBH_TD_r0_get, _lqsvm.CSRBBH_TD_r0_set)
    __swig_setmethods__["r1"] = _lqsvm.CSRBBH_TD_r1_set
    __swig_getmethods__["r1"] = _lqsvm.CSRBBH_TD_r1_get
    if _newclass:
        r1 = _swig_property(_lqsvm.CSRBBH_TD_r1_get, _lqsvm.CSRBBH_TD_r1_set)
    __swig_setmethods__["sum_at"] = _lqsvm.CSRBBH_TD_sum_at_set
    __swig_getmethods__["sum_at"] = _lqsvm.CSRBBH_TD_sum_at_get
    if _newclass:
        sum_at = _swig_property(_lqsvm.CSRBBH_TD_sum_at_get, _lqsvm.CSRBBH_TD_sum_at_set)
    __swig_setmethods__["sum_ab"] = _lqsvm.CSRBBH_TD_sum_ab_set
    __swig_getmethods__["sum_ab"] = _lqsvm.CSRBBH_TD_sum_ab_get
    if _newclass:
        sum_ab = _swig_property(_lqsvm.CSRBBH_TD_sum_ab_get, _lqsvm.CSRBBH_TD_sum_ab_set)
    __swig_setmethods__["sv_coef0"] = _lqsvm.CSRBBH_TD_sv_coef0_set
    __swig_getmethods__["sv_coef0"] = _lqsvm.CSRBBH_TD_sv_coef0_get
    if _newclass:
        sv_coef0 = _swig_property(_lqsvm.CSRBBH_TD_sv_coef0_get, _lqsvm.CSRBBH_TD_sv_coef0_set)
    __swig_setmethods__["sv_indices0"] = _lqsvm.CSRBBH_TD_sv_indices0_set
    __swig_getmethods__["sv_indices0"] = _lqsvm.CSRBBH_TD_sv_indices0_get
    if _newclass:
        sv_indices0 = _swig_property(_lqsvm.CSRBBH_TD_sv_indices0_get, _lqsvm.CSRBBH_TD_sv_indices0_set)
    __swig_setmethods__["rho0"] = _lqsvm.CSRBBH_TD_rho0_set
    __swig_getmethods__["rho0"] = _lqsvm.CSRBBH_TD_rho0_get
    if _newclass:
        rho0 = _swig_property(_lqsvm.CSRBBH_TD_rho0_get, _lqsvm.CSRBBH_TD_rho0_set)
    __swig_setmethods__["CEst"] = _lqsvm.CSRBBH_TD_CEst_set
    __swig_getmethods__["CEst"] = _lqsvm.CSRBBH_TD_CEst_get
    if _newclass:
        CEst = _swig_property(_lqsvm.CSRBBH_TD_CEst_get, _lqsvm.CSRBBH_TD_CEst_set)

    def __init__(self, *args):
        this = _lqsvm.new_CSRBBH_TD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _lqsvm.delete_CSRBBH_TD
    __del__ = lambda self: None

    def decision_function(self, x: 'double const *', label: 'int const *', y: 'double const *', SW: 'double const *') -> "double":
        return _lqsvm.CSRBBH_TD_decision_function(self, x, label, y, SW)

    def get_sv_coef0(self, z: 'double *') -> "void":
        return _lqsvm.CSRBBH_TD_get_sv_coef0(self, z)

    def get_sv_indices0(self, z: 'int *') -> "void":
        return _lqsvm.CSRBBH_TD_get_sv_indices0(self, z)

    def get_CEst(self, z: 'double *') -> "void":
        return _lqsvm.CSRBBH_TD_get_CEst(self, z)
CSRBBH_TD_swigregister = _lqsvm.CSRBBH_TD_swigregister
CSRBBH_TD_swigregister(CSRBBH_TD)

# This file is compatible with both classic and new-style classes.


